{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "echo",
            "type": "shell",
            "command": "echo Hello"
        },
        {
            "label": "Build LaTeX",
            "type": "shell",
            "command": "xelatex",
            "args": [
                "-interaction=nonstopmode",
                "-synctex=1",
                "-output-directory=${fileDirname}",
                "-jobname=CoverLetter-JoaoMarco-${input:positionName}-${input:brachName}-${input:getDate}",
                "main.tex"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "reveal": "silent",
                "panel": "shared"
            },
            "problemMatcher": [
                "$tsc"
            ]
        }
    ],
    "inputs": [
        {
            "id": "getDate",
            "type": "command",
            "command": "shellCommand.execute",
            "args": {
                "command": "powershell -Command \"Get-Date -Format 'yyyy-MM-dd'\"",
                "useSingleResult": true
            }
        },
        {
            "id": "brachName",
            "type": "command",
            "command": "shellCommand.execute",
            "args": {
                "command": "powershell -Command \"git branch --show-current | ForEach-Object { $_.Split('/')[-1] }\"",
                "useSingleResult": true
            }
        },
        {
            "id": "positionName",
            "type": "command",
            "command": "shellCommand.execute",
            "args": {
                "command": "powershell -Command \"$filename = '${fileBasenameNoExtension}'; if ($filename -match '(.*)-cover-letter-body') { $words = $matches[1] -split '-'; $result = ''; foreach ($word in $words) { $result += $word.Substring(0,1).ToUpper() + $word.Substring(1) }; $result }\"",
                "useSingleResult": true
            }
        }
    ]
}